形式化方法
形式化方法原则上就是用数学与逻辑的方法描述和验证软件。，主要分为两个步骤
“形式化规范”和“数学方法证明”

程序测试只能证明错误的存在，但不能证明错误不存在。

 形式化方法的本质是基于数学的方法来描述目标软件系统属性的一种技术。不同的形式化方法的数学基础是不同的，有的以集合论和一阶谓词演算为基础（如Z和 VDM），有的则以时态逻辑为基础。形式化方法需要形式化规约说明语言的支持。
将形式化方法用于软件和硬件设计，是期望能够像其它工程学科一样，使用适当的数学分析以提高设计的可靠性和鲁棒性。但是，由于采用形式化方法的成本高意味着它们通常只用于开发注重安全性的高度整合的系统。
从早期最简单的形式化方法——一阶谓词演算方法到现在的应用于不同领域、不同阶段 的基于逻辑、状态机、网络、进程代数、代数等众多形式化方法。形式化方法的发展趋势逐渐融入软件开发过程的各个阶段

根据说明目标软件系统的方式，形式化方法可以分为两类：
1）面向模型的形式化方法。面向模型的方法通过构造一个数学模型来说明系统的行为。
2）面向属性的形式化方法。面向属性的方法通过描述目标软件系统的各种属性来间接定义系统行为。

根据表达能力可分为：
1）基于模型的方法：通过明确定义状态和操作来建立一个系统模型（使系统从一个状态转换到另一个状态）。
2）基于逻辑的方法：用逻辑描述系统预期的性能，包括底层规约、时序和可能性行为。
3）代数方法：通过将未定义状态下不同的操作行为相联系，给出操作的显式定义。
4）进程代数方法：通过限制所有容许的可观察的过程间通信来表示系统行为。
5）基于网络的方法：由于图形化表示法易于理解，而且非专业人员能够使用，因此是一种通用的系统确定表示法。

